{"version":3,"sources":["option_controller.js"],"names":["mongoose","require","Option","Question","module","exports","create","req","res","findById","params","id","question","text","body","option","link_to_vote","_id","save","options","push","json","console","log","status","error","votes","findOne","$elemMatch","$eq","findByIdAndDelete","updateOne","$pull","$in","message","data","addVote"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose')\nconst Option = require('../models/option');\nconst Question = require('../models/question')\n\n// Controller function to create an option for a given question\nmodule.exports.create = async function(req, res) {\n    let question = await Question.findById(req.params.id);\n    // Check if the question exists\n    if (question) {\n        try {\n            // Create the option with the provided text\n            let option = await Option.create({\n                    text: req.body.text\n                })\n                // Set the link for the vote for the option\n            option.link_to_vote = `http://localhost:4000/options/${option._id}/add_vote`;\n            option.save();\n            // Push the option to the question's options array\n            question.options.push(option._id);\n            question.save();\n            // Return the created option\n            return res.json(option)\n        } catch (err) {\n            console.log(err)\n            return res.status(500).json({\n                error: 'Internal server error'\n            })\n        }\n    } else {\n        // If the question doesn't exist, return an error\n        return res.status(404).json({\n            error: 'Cannot find question'\n        })\n    }\n}\n\n// Controller function to delete an option\nmodule.exports.delete = async function(req, res) {\n    try {\n        // Find the option with the provided ID\n        let option = await Option.findById(req.params.id);\n        if (option) {\n            // Check if the option has any votes\n            if (option.votes < 1) {\n                // Find the question that contains the option\n                let question = await Question.findOne({ options: { $elemMatch: { $eq: req.params.id } } })\n                if (question) {\n                    // Delete the option and remove it from the question's options array\n                    await Option.findByIdAndDelete(req.params.id);\n                    await Question.updateOne({ _id: question._id }, { $pull: { options: { $in: req.params.id } } });\n                    return res.json({ message: \"Option deleted successfully\", data: option });\n                }\n            } else {\n                // If the option has votes, return an error\n                return res.status(403).json({\n                    error: 'Option votes are given, cannot delete it'\n                })\n            }\n        } else {\n            // If the option doesn't exist, return an error\n            return res.status(404).json({\n                error: 'Cannot find option'\n            })\n        }\n    } catch (err) {\n        console.log(err)\n        return res.status(500).json({\n            error: 'Internal server error'\n        })\n    }\n}\n\n// Controller function to add a vote to an option\nmodule.exports.addVote = async function(req, res) {\n    try {\n        // Find the option with the provided ID\n        let option = await Option.findById(req.params.id);\n        if (option) {\n            // Increment the votes count for the option and save it\n            option.votes += 1;\n            option.save();\n            return res.json({ message: \"Vote added to option\", data: option });\n        } else {\n            // If the option doesn't exist, return an error\n            return res.status(404).json({\n                error: 'Option not found'\n            })\n        }\n    } catch (err) {\n        console.log(err)\n        return res.status(500).json({\n            error: 'Internal server error'\n        })\n    }\n}"],"file":"option_controller.dev.js"}