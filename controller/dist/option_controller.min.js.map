{"version":3,"sources":["option_controller.js"],"names":["mongoose","require","Option","module","exports","create","req","res","question","option","regeneratorRuntime","async","_context","prev","next","awrap","Question","findById","params","id","sent","text","body","link_to_vote","concat","_id","save","options","push","abrupt","json","t0","console","log","status","error","stop","_context2","votes","findOne","$elemMatch","$eq","findByIdAndDelete","updateOne","$pull","$in","message","data","addVote","_context3"],"mappings":"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","file":"option_controller.min.js","sourcesContent":["const mongoose = require('mongoose')\nconst Option = require('../models/option');\nconst Question = require('../models/question')\n\n// Controller function to create an option for a given question\nmodule.exports.create = async function(req, res) {\n    let question = await Question.findById(req.params.id);\n    // Check if the question exists\n    if (question) {\n        try {\n            // Create the option with the provided text\n            let option = await Option.create({\n                    text: req.body.text\n                })\n                // Set the link for the vote for the option\n            option.link_to_vote = `http://localhost:4000/options/${option._id}/add_vote`;\n            option.save();\n            // Push the option to the question's options array\n            question.options.push(option._id);\n            question.save();\n            // Return the created option\n            return res.json(option)\n        } catch (err) {\n            console.log(err)\n            return res.status(500).json({\n                error: 'Internal server error'\n            })\n        }\n    } else {\n        // If the question doesn't exist, return an error\n        return res.status(404).json({\n            error: 'Cannot find question'\n        })\n    }\n}\n\n// Controller function to delete an option\nmodule.exports.delete = async function(req, res) {\n    try {\n        // Find the option with the provided ID\n        let option = await Option.findById(req.params.id);\n        if (option) {\n            // Check if the option has any votes\n            if (option.votes < 1) {\n                // Find the question that contains the option\n                let question = await Question.findOne({ options: { $elemMatch: { $eq: req.params.id } } })\n                if (question) {\n                    // Delete the option and remove it from the question's options array\n                    await Option.findByIdAndDelete(req.params.id);\n                    await Question.updateOne({ _id: question._id }, { $pull: { options: { $in: req.params.id } } });\n                    return res.json({ message: \"Option deleted successfully\", data: option });\n                }\n            } else {\n                // If the option has votes, return an error\n                return res.status(403).json({\n                    error: 'Option votes are given, cannot delete it'\n                })\n            }\n        } else {\n            // If the option doesn't exist, return an error\n            return res.status(404).json({\n                error: 'Cannot find option'\n            })\n        }\n    } catch (err) {\n        console.log(err)\n        return res.status(500).json({\n            error: 'Internal server error'\n        })\n    }\n}\n\n// Controller function to add a vote to an option\nmodule.exports.addVote = async function(req, res) {\n    try {\n        // Find the option with the provided ID\n        let option = await Option.findById(req.params.id);\n        if (option) {\n            // Increment the votes count for the option and save it\n            option.votes += 1;\n            option.save();\n            return res.json({ message: \"Vote added to option\", data: option });\n        } else {\n            // If the option doesn't exist, return an error\n            return res.status(404).json({\n                error: 'Option not found'\n            })\n        }\n    } catch (err) {\n        console.log(err)\n        return res.status(500).json({\n            error: 'Internal server error'\n        })\n    }\n}"]}