{"version":3,"sources":["index.js"],"names":["require","config","express","morgan","db","app","port","process","env","PORT","use","urlencoded","extended","json","req","res","next","error","Error","status","message","listen","err","console","log"],"mappings":";;AAAA;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,G,CAGA;;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAGA;;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,mBAAD,CAAlB,C,CAGA;;;AACA,IAAMK,GAAG,GAAGH,OAAO,EAAnB,C,CAGA;;AACA,IAAMI,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CAGA;AACA;;AACAJ,GAAG,CAACK,GAAJ,CAAQP,MAAM,CAAC,KAAD,CAAd,E,CACA;;AACAE,GAAG,CAACK,GAAJ,CAAQR,OAAO,CAACS,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CACA;;AACAP,GAAG,CAACK,GAAJ,CAAQR,OAAO,CAACW,IAAR,EAAR,E,CAGA;;AACAR,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAaV,OAAO,CAAC,UAAD,CAApB,E,CAGA;;AACAK,GAAG,CAACK,GAAJ,CAAQ,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,EAAAA,KAAK,CAACE,MAAN,GAAe,GAAf;AACAH,EAAAA,IAAI,CAACC,KAAD,CAAJ;AACH,CAJD;AAKAZ,GAAG,CAACK,GAAJ,CAAQ,UAACO,KAAD,EAAQH,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AAC/BD,EAAAA,GAAG,CAACI,MAAJ,CAAWF,KAAK,CAACE,MAAN,IAAgB,GAA3B;AACAJ,EAAAA,GAAG,CAACF,IAAJ,CAAS;AACLI,IAAAA,KAAK,EAAE;AACHG,MAAAA,OAAO,EAAEH,KAAK,CAACG;AADZ;AADF,GAAT;AAKH,CAPD,E,CASA;;AACAf,GAAG,CAACgB,MAAJ,CAAWf,IAAX,EAAiB,UAACgB,GAAD,EAAS;AACtB,MAAIA,GAAJ,EAAS;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDF,GAAzD;AACA;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8ClB,IAA9C;AACH,CAND","sourcesContent":["// to access environment variables\nrequire('dotenv').config();\n\n\n// third-party modules\nconst express = require('express');\nconst morgan = require('morgan');\n\n\n// importing database connection file\nconst db = require('./config/mongoose');\n\n\n// starting a new express application\nconst app = express();\n\n\n// port on which server will listen\nconst port = process.env.PORT || 4000;\n\n\n// middlewares\n// morgan() to handle logs\napp.use(morgan('dev'));\n// express.urlencoded() parses incoming requests with urlencoded payloads\napp.use(express.urlencoded({ extended: false }));\n// express.json() parses incoming requests with JSON payloads\napp.use(express.json());\n\n\n// for handling routes\napp.use('/', require('./routes'));\n\n\n// for handling incorrect routes\napp.use((req, res, next) => {\n    const error = new Error(\"Not Found\");\n    error.status = 404;\n    next(error);\n});\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        error: {\n            message: error.message\n        }\n    });\n});\n\n// binds and listens for connections on the specified host and port\napp.listen(port, (err) => {\n    if (err) {\n        console.log(\"There is an error in starting the server.\", err);\n        return;\n    }\n    console.log(\"Server is running on the port \", port);\n});"],"file":"index.dev.js"}