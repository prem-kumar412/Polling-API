{"version":3,"sources":["question.js"],"names":["Question","require","Option","module","req","res","questions","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","questionsCount","length","t0","message","error","stop","exports","create","question","_context2","title","body","save","abrupt","_id","addOption","option","_context3","findById","params","questionId","text","options","push","optionCreated","_context4","deleteOne","deleteMany","questionRef","link_to_vote","listQuestion","_context5","populate","path","select","exec","data","console","log"],"mappings":"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","file":"question.min.js","sourcesContent":["// import required models\nconst Question = require('../models/question');\nconst Option = require('../models/option');\n\n// list all the questions\nmodule.exports.listAll = async function(req, res) {\n    try {\n        // find all the questions with their linked options\n        const questions = await Question.find({}, 'title');\n\n        res.status(200).json({\n            questionsCount: questions.length,\n            questions: questions\n        })\n    } catch (error) {\n        res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        })\n    }\n}\n\n// create a new question\nmodule.exports.create = async function(req, res) {\n    try {\n        // create question\n        const question = new Question({\n            title: req.body.title\n        });\n        // save question\n        await question.save();\n\n        return res.status(201).json({\n            message: \"Question has been created.\",\n            question: {\n                _id: question._id,\n                title: question.title\n            }\n        });\n    } catch (error) {\n        return res.status(500).json({\n            message: \"Error\",\n            error: error\n        });\n    }\n}\n\nmodule.exports.addOption = async function(req, res) {\n    try {\n        // find question\n        const question = await Question.findById(req.params.questionId);\n\n        if (!question) {\n            return res.status(404).json({\n                message: \"Question not found!\"\n            });\n        }\n\n        // create a new option\n        const option = new Option({\n            text: req.body.text,\n            questionRef: req.params.questionId,\n        });\n\n        option.link_to_vote = `http://localhost:4000/options/${option._id}/add_vote`;\n\n        // save option\n        await option.save();\n\n        // created option's reference is added in options array of question\n        question.options.push(option);\n\n        // new changes saved in question\n        await question.save();\n\n        res.status(200).json({\n            message: \"Option created successfully!\",\n            optionCreated: true,\n            option: {\n                _id: option._id,\n                text: option.text\n            }\n        });\n    } catch (error) {\n        console.log('Error: ', error);\n        res.status(500).json({\n            message: error.message\n        });\n    }\n}\n\nmodule.exports.delete = async function(req, res) {\n    try {\n        // delete question\n        const question = await Question.deleteOne({ _id: req.params.questionId });\n\n        // if question not deleted\n        if (question.deletedCount == 0) {\n            return res.status(404).json({\n                message: \"Question not found.\"\n            });\n        }\n\n        // options, which are linked with deleted question, get removed\n        await Option.deleteMany({ questionRef: req.params.questionId });\n\n        return res.status(200).json({\n            message: \"Question has been deleted\",\n        });\n    } catch (error) {\n        console.log(error);\n        return res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        });\n    }\n}\n\nmodule.exports.listQuestion = async function(req, res) {\n    try {\n        // find question and store its data with linked options data\n        const question = await Question.findById(req.params.questionId)\n            .populate({ path: 'options', select: '_id text votes link_to_vote' })\n            .exec();\n\n        if (!question) {\n            return res.status(404).json({\n                message: \"Question not found with this questionId\"\n            });\n        }\n\n        return res.status(200).json({\n            message: \"Question fetched successfully!\",\n            data: question\n        });\n    } catch (error) {\n        console.log(error);\n        return res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        });\n    }\n}"]}