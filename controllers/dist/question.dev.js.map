{"version":3,"sources":["question.js"],"names":["Question","require","Option","module","exports","listAll","req","res","find","questions","status","json","questionsCount","length","message","error","create","question","title","body","save","_id","addOption","findById","params","questionId","option","text","questionRef","link_to_vote","options","push","optionCreated","console","log","deleteOne","deletedCount","deleteMany","listQuestion","populate","path","select","exec","data"],"mappings":"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","sourcesContent":["// import required models\nconst Question = require('../models/question');\nconst Option = require('../models/option');\n\n// list all the questions\nmodule.exports.listAll = async function(req, res) {\n    try {\n        // find all the questions with their linked options\n        const questions = await Question.find({}, 'title');\n\n        res.status(200).json({\n            questionsCount: questions.length,\n            questions: questions\n        })\n    } catch (error) {\n        res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        })\n    }\n}\n\n// create a new question\nmodule.exports.create = async function(req, res) {\n    try {\n        // create question\n        const question = new Question({\n            title: req.body.title\n        });\n        // save question\n        await question.save();\n\n        return res.status(201).json({\n            message: \"Question has been created.\",\n            question: {\n                _id: question._id,\n                title: question.title\n            }\n        });\n    } catch (error) {\n        return res.status(500).json({\n            message: \"Error\",\n            error: error\n        });\n    }\n}\n\nmodule.exports.addOption = async function(req, res) {\n    try {\n        // find question\n        const question = await Question.findById(req.params.questionId);\n\n        if (!question) {\n            return res.status(404).json({\n                message: \"Question not found!\"\n            });\n        }\n\n        // create a new option\n        const option = new Option({\n            text: req.body.text,\n            questionRef: req.params.questionId,\n        });\n\n        option.link_to_vote = `http://localhost:4000/options/${option._id}/add_vote`;\n\n        // save option\n        await option.save();\n\n        // created option's reference is added in options array of question\n        question.options.push(option);\n\n        // new changes saved in question\n        await question.save();\n\n        res.status(200).json({\n            message: \"Option created successfully!\",\n            optionCreated: true,\n            option: {\n                _id: option._id,\n                text: option.text\n            }\n        });\n    } catch (error) {\n        console.log('Error: ', error);\n        res.status(500).json({\n            message: error.message\n        });\n    }\n}\n\nmodule.exports.delete = async function(req, res) {\n    try {\n        // delete question\n        const question = await Question.deleteOne({ _id: req.params.questionId });\n\n        // if question not deleted\n        if (question.deletedCount == 0) {\n            return res.status(404).json({\n                message: \"Question not found.\"\n            });\n        }\n\n        // options, which are linked with deleted question, get removed\n        await Option.deleteMany({ questionRef: req.params.questionId });\n\n        return res.status(200).json({\n            message: \"Question has been deleted\",\n        });\n    } catch (error) {\n        console.log(error);\n        return res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        });\n    }\n}\n\nmodule.exports.listQuestion = async function(req, res) {\n    try {\n        // find question and store its data with linked options data\n        const question = await Question.findById(req.params.questionId)\n            .populate({ path: 'options', select: '_id text votes link_to_vote' })\n            .exec();\n\n        if (!question) {\n            return res.status(404).json({\n                message: \"Question not found with this questionId\"\n            });\n        }\n\n        return res.status(200).json({\n            message: \"Question fetched successfully!\",\n            data: question\n        });\n    } catch (error) {\n        console.log(error);\n        return res.status(500).json({\n            message: \"Internal Server Error\",\n            error: error\n        });\n    }\n}"],"file":"question.dev.js"}